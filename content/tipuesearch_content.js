var tipuesearch = {"pages": [{'title': 'About', 'text': '\n GitHub\xa0 倉儲： https://github.com/40823224/cd2021 \n GitHub： https://40823224.github.io/cd2021/content/index.html \n GitLab倉儲： https://gitlab.com/40823224/cd2021 \n GitLab： https://40823224.gitlab.io/cd2021/content/index.html \n Gogs： https://fossil.kmol.info:3443/40823224/cd2021 \n Fossil： https://fossil.kmol.info/u/40823224/doc/trunk/content/index.html \n \n stage1-bg13： https://40823224.github.io/stage1-bg13/content/index.html \n stage2-bg3： https://40823224.github.io/stage2-bg3/content/index.html \n stage3-bg2： https://40823224.github.io/stage3-bg2/content/index.html \n', 'tags': '', 'url': 'About.html'}, {'title': 'stage1', 'text': 'stage1-bg13 \n 組員：40823223、40823224 \n 倉儲： \n https://40823223.github.io/stage1-bg13/content/index.html \n https://40823224.github.io/stage1-bg13/content/index.html \n', 'tags': '', 'url': 'stage1.html'}, {'title': 'W1', 'text': '建立倉儲 \n \n 開啟leo \n \n 開啟blog \n \n 開啟Disqus \n \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '分組題目內容 \n stage1-bg13 主題：人力軌道車 高鐵太貴了，搭這個不用錢 W2：繪製零件 W3：模擬路徑並除錯 W4：報告內容 \n \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '討論內容 \n \n 初版組合圖 \n \n 成功版組合圖 \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '第一版作動 \n \n 作動方式 :四連桿機構 但因設計連桿不良失敗 因設計的四連桿機構中的曲柄搖桿機構須要找到兩個固定點 但固定點只有辦法設定一個 另一個需在轉動的齒輪上 若轉動的齒輪變成固定端將無法作動 故此次設計失敗。 \n 成功版作動 \n \n 設計內容：重新設計了作動方式 一樣是使用連桿 但這次是把下壓的連桿另一端改成一個旋轉軸 再將軸連接一個齒輪 並將輪子上的軸也加裝了齒輪 兩個齒輪碰到後 驅動了輪子旋轉。 \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '簡報報告(3/19) \n \n \n stage1-bg 影片長度 \n 使用get_video_duration.py 讀取2b的影片長度 \n # pip install moviepy\nimport os\nfrom moviepy.editor import VideoFileClip\n\n# Converts into more readable format\ndef convert(seconds):\n    hours = seconds // 3600\n    seconds %= 3600\n    mins = seconds // 60\n    seconds %= 60\n    return hours, mins, seconds\n    \nfor dname, dirs, files in os.walk("2021-03_2b_stage1"):\n    for fname in files:\n        vName = os.path.join(dname, fname)\n        clip = VideoFileClip(vName)\n        hours, mins, secs = convert(clip.duration)\n        print(fname + "組:", str(int(mins)) + "分", str(int(secs)) + "秒") \n \n \n \n stage1-bg1 07:14 \n stage1-bg2 01:55 \n stage1-bg3 01:58 \n stage1-bg4 02:51 \n stage1-bg5 03:00 \n stage1-bg6 03:07 \n stage1-bg7 02:47 \n stage1-bg8 03:20 \n stage1-bg9 02:43 \n stage1-bg10 02:20 \n stage1-bg11 01:38 \n stage1-bg12 01:47 \n stage1-bg13 02:09 \n stage1-bg14 05:58 \n stage1-bg15 03:24 \n stage1-bg16 03:33 \n stage1-bg17 04:33 \n stage1-bg18 05:03 \n stage1-bg19 03:11 \n stage1-bg20 03:32 \n stage1-bg21 05:02 \n stage1-bg22 04:47 \n stage1-bg23 02:55 \n stage1-bg24 05:00 \n stage1-bg25 04:53 \n stage1-bg26 \n stage1-bg27 03:43 \n stage1-bg28 \n stage1-bg29 \n', 'tags': '', 'url': 'W5.html'}, {'title': 'stage2', 'text': 'stage2-bg3 \n 組員：40823206、40823207、40823223、40823224 \n 倉儲： \n https://40823206.github.io/stage2-bg3/content/index.html \n https://40823207.github.io/stage2-bg3/content/index.html \n https://40823223.github.io/stage2-bg3/content/index.html \n https://40823224.github.io/stage2-bg3/content/index.html \n \n', 'tags': '', 'url': 'stage2.html'}, {'title': 'W6', 'text': 'stage2-bg3 主題：夾娃娃機 W7：繪製零件 W8：模擬路徑並除錯 W9：報告內容 \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '小組討論Gitter \n 分配工作 \n 繪圖:40823207、40823223 \n 網頁編輯:40823206、40823224 \n 討論內容： \n \n \n \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '繪製零件 \n 雲端下載零件檔 \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '期中考週 \n 零件檔如下 \n \n \n \n \n \n \n \n \n \n \n \n \n \n 連桿 \n 下底盤 \n 上底盤 \n 尺條 \n \n \n \n \n \n \n \n \n 齒輪 \n 連桿2 \n 連桿3 \n 底座 \n \n \n \n \n \n \n \n \n 滑塊 \n \n 連桿1 \n 墊圈 \n \n \n \n \n \n \n \n \n 鉤爪 \n 馬達 \n 爪子機架 \n \n \n \n \n \n \n \n \n \n 墊片1 \n 墊片2 \n 墊片3 \n 轉把 \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W9.html'}, {'title': 'stage3', 'text': 'stage3-bg2 \n 組員： \n 40823217、40823201、40823209、40823210、 \n 40823206、40823207、40823223、40823224 \n 倉儲： \n https://40823217.github.io/stage3-bg2/content/index.html \n https://40823201.github.io/stage3-bg2/content/index.html \n https://40823209.github.io/stage3-bg2/content/index.html \n https://40823210.github.io/stage3-bg2/content/index.html \n https://40823206.github.io/stage3-bg2/content/index.html \n https://40823207.github.io/stage3-bg2/content/index.html \n https://40823223.github.io/stage3-bg2/content/index.html \n https://40823224.github.io/stage3-bg2/content/index.html \n', 'tags': '', 'url': 'stage3.html'}, {'title': 'W10', 'text': '\n python -m http.server 8000 --bind 192.168.192.127 \n 連線到ipv4 \n \n \n 輸入網址確認是否成功 (192.168.192.127:8000) \n', 'tags': '', 'url': 'W10.html'}, {'title': 'task 演練', 'text': '', 'tags': '', 'url': 'task 演練.html'}, {'title': 'task1', 'text': '一、建立 stage3_2b.py 跑出小組組長、組員及其超連結 \n \n \n 40823245 repo  |  40823245 site  |  stage3-bg1 repo  |  stage3-bg1 site 40823251 repo  |  40823251 site  |  stage3-bg1 repo  |  stage3-bg1 site 40823208 repo  |  40823208 site  |  stage3-bg1 repo  |  stage3-bg1 site 40823213 repo  |  40823213 site  |  stage3-bg1 repo  |  stage3-bg1 site 40823232 repo  |  40823232 site  |  stage3-bg1 repo  |  stage3-bg1 site 40823234 repo  |  40823234 site  |  stage3-bg1 repo  |  stage3-bg1 site 40823235 repo  |  40823235 site  |  stage3-bg1 repo  |  stage3-bg1 site 40823246 repo |  40823246 site  |  stage3-bg1 repo  |  stage3-bg1 site ---------- 40823217 repo  |  40823217 site  |  stage3-bg2 repo  |  stage3-bg2 site 40823201 repo  |  40823201 site  |  stage3-bg2 repo  |  stage3-bg2 site 40823209 repo  |  40823209 site  |  stage3-bg2 repo  |  stage3-bg2 site 40823210 repo  |  40823210 site  |  stage3-bg2 repo  |  stage3-bg2 site 40823206 repo  |  40823206 site  |  stage3-bg2 repo  |  stage3-bg2 site 40823207 repo  |  40823207 site  |  stage3-bg2 repo  |  stage3-bg2 site 40823223 repo  |  40823223 site  |  stage3-bg2 repo  |  stage3-bg2 site 40823224 repo |  40823224 site  |  stage3-bg2 repo  |  stage3-bg2 site ---------- 40823236 repo  |  40823236 site  |  stage3-bg3 repo  |  stage3-bg3 site 40823202 repo  |  40823202 site  |  stage3-bg3 repo  |  stage3-bg3 site 40823203 repo  |  40823203 site  |  stage3-bg3 repo  |  stage3-bg3 site 40823212 repo  |  40823212 site  |  stage3-bg3 repo  |  stage3-bg3 site 40823219 repo  |  40823219 site  |  stage3-bg3 repo  |  stage3-bg3 site 40823222 repo  |  40823222 site  |  stage3-bg3 repo  |  stage3-bg3 site 40823231-2 repo  |  40823231-2 site  |  stage3-bg3 repo  |  stage3-bg3 site 40823244 repo |  40823244 site  |  stage3-bg3 repo  |  stage3-bg3 site ---------- 40823239 repo  |  40823239 site  |  stage3-bg4 repo  |  stage3-bg4 site s40723140 repo  |  s40723140 site  |  stage3-bg4 repo  |  stage3-bg4 site s40723128 repo  |  s40723128 site  |  stage3-bg4 repo  |  stage3-bg4 site s40723139 repo  |  s40723139 site  |  stage3-bg4 repo  |  stage3-bg4 site s40723106 repo  |  s40723106 site  |  stage3-bg4 repo  |  stage3-bg4 site s40723135 repo  |  s40723135 site  |  stage3-bg4 repo  |  stage3-bg4 site s40723143 repo  |  s40723143 site  |  stage3-bg4 repo  |  stage3-bg4 site s40723215 repo |  s40723215 site  |  stage3-bg4 repo  |  stage3-bg4 site ---------- 40823221 repo  |  40823221 site  |  stage3-bg5 repo  |  stage3-bg5 site 40823204 repo  |  40823204 site  |  stage3-bg5 repo  |  stage3-bg5 site 40823205 repo  |  40823205 site  |  stage3-bg5 repo  |  stage3-bg5 site 40823220 repo  |  40823220 site  |  stage3-bg5 repo  |  stage3-bg5 site 40823228 repo  |  40823228 site  |  stage3-bg5 repo  |  stage3-bg5 site 40823237 repo  |  40823237 site  |  stage3-bg5 repo  |  stage3-bg5 site 40823242 repo  |  40823242 site  |  stage3-bg5 repo  |  stage3-bg5 site 40823250 repo |  40823250 site  |  stage3-bg5 repo  |  stage3-bg5 site 40832244 repo |  40832244 site  |  stage3-bg5 repo  |  stage3-bg5 site ---------- 40823225 repo  |  40823225 site  |  stage3-bg6 repo  |  stage3-bg6 site 40823214 repo  |  40823214 site  |  stage3-bg6 repo  |  stage3-bg6 site 40823218 repo  |  40823218 site  |  stage3-bg6 repo  |  stage3-bg6 site 40823211 repo  |  40823211 site  |  stage3-bg6 repo  |  stage3-bg6 site 40823248 repo  |  40823248 site  |  stage3-bg6 repo  |  stage3-bg6 site 40823247 repo  |  40823247 site  |  stage3-bg6 repo  |  stage3-bg6 site 40823216 repo  |  40823216 site  |  stage3-bg6 repo  |  stage3-bg6 site 40823238 repo |  40823238 site  |  stage3-bg6 repo  |  stage3-bg6 site ---------- 40623144 repo  |  40623144 site  |  stage3-bg7 repo  |  stage3-bg7 site 40823233 repo  |  40823233 site  |  stage3-bg7 repo  |  stage3-bg7 site s40723224 repo  |  s40723224 site  |  stage3-bg7 repo  |  stage3-bg7 site 40823241 repo  |  40823241 site  |  stage3-bg7 repo  |  stage3-bg7 site 40423155 repo  |  40423155 site  |  stage3-bg7 repo  |  stage3-bg7 site 40823227 repo  |  40823227 site  |  stage3-bg7 repo  |  stage3-bg7 site s40723233 repo  |  s40723233 site  |  stage3-bg7 repo  |  stage3-bg7 site ---------- \n \n 二、建立 stage3_2b_random.py 用以 每組亂數抽選 2 名組員 \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': 'remoteapi 2w1a 練習 \n \n \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': 'OBS直播步驟 \n \n \n \n \n \n \n 選擇視窗擷取或顯示器擷取 \n', 'tags': '', 'url': 'task3.html'}, {'title': 'W14', 'text': 'RoboDK 練習 \n \n \n pick_and_place.py範例內容: \n # KMOLab Portable RoboDK pick and place\nfrom robolink import *    # API to communicate with robodk\nfrom robodk import *      # robodk robotics toolbox\n\n# Setup global parameters\nBALL_DIAMETER = 100 # diameter of one ball\nAPPROACH = 100      # approach distance to grab each part, in mm\nnTCPs = 6           # number of TCP\'s in the tool\n\n#----------------------------------------------\n# Function definitions\n\ndef box_calc(BALLS_SIDE=4, BALLS_MAX=None):\n    """Calculate a list of points (ball center) as if the balls were stored in a box"""\n    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3\n    xyz_list = []\n    for h in range(BALLS_SIDE):\n        for i in range(BALLS_SIDE):\n            for j in range(BALLS_SIDE):\n                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]\n                if len(xyz_list) >= BALLS_MAX:\n                    return xyz_list\n    return xyz_list\n\ndef pyramid_calc(BALLS_SIDE=4):\n    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""\n    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)\n    BALL_DIAMETER = 100\n    xyz_list = []\n    sqrt2 = 2**(0.5)\n    for h in range(BALLS_SIDE):\n        for i in range(BALLS_SIDE-h):\n            for j in range(BALLS_SIDE-h):\n                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2\n                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]\n    return xyz_list\n\ndef balls_setup(frame, positions):\n    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""\n    nballs = len(positions)\n    step = 1.0/(nballs - 1)\n    for i in range(nballs):\n        newball = frame.Paste()\n        newball.setName(\'ball \' + str(i)) #set item name\n        newball.setPose(transl(positions[i])) #set item position with respect to parent\n        newball.setVisible(True, False) #make item visible but hide the reference frame\n        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color\n\ndef cleanup_balls(parentnodes):\n    """Delete all child items whose name starts with \\"ball\\", from the provided list of parent items."""\n    todelete = []\n    for item in parentnodes:\n        todelete = todelete + item.Childs()\n\n    for item in todelete:\n        if item.Name().startswith(\'ball\'):\n            item.Delete()\n\ndef TCP_On(toolitem, tcp_id):\n    """Attach the closest object to the toolitem Htool pose,\n    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""\n    toolitem.AttachClosest()\n    toolitem.RDK().RunMessage(\'Set air valve %i on\' % (tcp_id+1))\n    toolitem.RDK().RunProgram(\'TCP_On(%i)\' % (tcp_id+1));\n        \ndef TCP_Off(toolitem, tcp_id, itemleave=0):\n    """Detaches the closest object attached to the toolitem Htool pose,\n    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""\n    toolitem.DetachAll(itemleave)\n    toolitem.RDK().RunMessage(\'Set air valve %i off\' % (tcp_id+1))\n    toolitem.RDK().RunProgram(\'TCP_Off(%i)\' % (tcp_id+1));\n\n\n#----------------------------------------------------------\n# The program starts here:\n\n# Any interaction with RoboDK must be done through RDK:\nRDK = Robolink()\n\n# Turn off automatic rendering (faster)\nRDK.Render(False)\n\n#RDK.Set_Simulation_Speed(500); # set the simulation speed\n\n# Gather required items from the station tree\nrobot = RDK.Item(\'Fanuc M-710iC/50\')\nrobot_tools = robot.Childs()\n#robottool = RDK.Item(\'MainTool\')\nframe1 = RDK.Item(\'Table 1\')\nframe2 = RDK.Item(\'Table 2\')\n\n# Copy a ball as an object (same as CTRL+C)\nballref = RDK.Item(\'reference ball\')\nballref.Copy()\n\n# Run a pre-defined station program (in RoboDK) to replace the two tables\nprog_reset = RDK.Item(\'Replace objects\')\nprog_reset.RunProgram()\n\n# Call custom procedure to remove old objects\ncleanup_balls([frame1, frame2])\n\n# Make a list of positions to place the objects\nframe1_list = pyramid_calc(4)\nframe2_list = pyramid_calc(4)\n\n# Programmatically place the objects with a custom-made procedure\nballs_setup(frame1, frame1_list)\n\n# Delete previously generated tools\nfor tool in robot_tools:\n    if tool.Name().startswith(\'TCP\'):\n        tool.Delete()\n        \n# Calculate tool frames for the suction cup tool of 6 suction cups\nTCP_list = []\nfor i in range(nTCPs):\n    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)\n    TCPi = robot.AddTool(TCPi_pose, \'TCP %i\' % (i+1))\n    TCP_list.append(TCPi)\n\nTCP_0 = TCP_list[0]\n\n# Turn on automatic rendering\nRDK.Render(True)\n\n# Move balls    \nrobot.setPoseTool(TCP_list[0])\nnballs_frame1 = len(frame1_list)\nnballs_frame2 = len(frame2_list)\nidTake = nballs_frame1 - 1\nidLeave = 0\nidTCP = 0\ntarget_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)\n\nwhile idTake >= 0:\n    # ------------------------------------------------------------------\n    # first priority: grab as many balls as possible\n    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -> nTCPs)\n    ntake = min(nTCPs, idTake + 1)\n\n    # approach to frame 1\n    robot.setPoseFrame(frame1)\n    robot.setPoseTool(TCP_0)\n    robot.MoveJ([0,0,0,0,10,-200])\n    robot.MoveJ(target_app_frame)\n\n    # grab ntake balls from frame 1\n    for i in range(ntake):\n        TCPi = TCP_list[i]\n        robot.setPoseTool(TCPi)\n        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted\n        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)\n        target_app = target*transl(0,0,-APPROACH)\n        idTake = idTake - 1        \n        robot.MoveL(target_app)\n        robot.MoveL(target)\n        TCP_On(TCPi, i)\n        robot.MoveL(target_app)\n \n    # ------------------------------------------------------------------\n    # second priority: unload the tool     \n    # approach to frame 2 and place the tool balls into table 2\n    robot.setPoseTool(TCP_0)\n    robot.MoveJ(target_app_frame)\n    robot.MoveJ([0,0,0,0,10,-200])\n    robot.setPoseFrame(frame2)    \n    robot.MoveJ(target_app_frame)\n    for i in range(ntake):\n        TCPi = TCP_list[i]\n        robot.setPoseTool(TCPi)\n        if idLeave > nballs_frame2-1:\n            raise Exception("No room left to place objects in Table 2")\n        \n        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted\n        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)\n        target_app = target*transl(0,0,-APPROACH)\n        idLeave = idLeave + 1        \n        robot.MoveL(target_app)\n        robot.MoveL(target)\n        TCP_Off(TCPi, i, frame2)\n        robot.MoveL(target_app)\n\n    robot.MoveJ(target_app_frame)\n\n# Move home when the robot finishes\nrobot.MoveJ([0,0,0,0,10,-200])\n \n', 'tags': '', 'url': 'W14.html'}, {'title': 'W15', 'text': 'MTB Robot 練習 \n \n \n \n KEY \n 功能 \n \n \n D \n 下降 \n \n \n U \n 上升 \n \n \n L \n 向左 \n \n \n R \n 向右 \n \n \n Q \n 放掉 \n \n \n P \n 令變數值變true \n \n \n C \n 顯示座標 \n \n \n \n Note： \n \n Dummy1 為黏膠 \n suction Pad 為吸盤，模組可由 components>grippers 中拉出 \n 坐標系從介面中的other中拉出 \n leo 中的 actuation 為按鈕設定及鍵盤作動 \n -- 為單行註解 \n -- [[\u3000 ]]-- 為多行註解 \n \n \n mtbrobot_w15.lua範例內容: \n function sysCall_init() \n    axis1=sim.getObjectHandle(\'MTB_axis1\')\n    axis2=sim.getObjectHandle(\'MTB_axis2\')\n    axis3=sim.getObjectHandle(\'MTB_axis3\')\n    axis4=sim.getObjectHandle(\'MTB_axis4\')\n    mtb3=sim.getObjectHandle(\'MTB_link3Respondable\')\n    suctionPad=sim.getObjectHandle(\'suctionPad\')\n    BaseFrame=sim.getObjectHandle("BaseFrame")\n    block =sim.getObjectHandle("block")\n    rotation1 = 0\n    distance3 = 0\n    deg = math.pi/180\nend\nfunction sysCall_actuation() \n    -- 吸盤往下降時, 直接貼在方塊頂部的校正值, 單位 m\n    -- 向下較正值為 4.2 mm\n    calibration = 0.0042\n    message, auxiliaryData=sim.getSimulatorMessage()\n        while message ~= -1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage(\'使用者按下 key:\'..key)\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==112) then --p activate the suction pad\n                    -- if key p pressed activate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                end -- if p\n                if (auxiliaryData[1]==113) then --q deactivate the suction pad\n                    -- if key q pressed deactivate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if q\n                if (auxiliaryData[1]==114) then --r right turn in degree\n                    -- if key r pressed axis1 angle adds 5 degrees\n                     rotation1 = rotation1 + 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if r\n                if (auxiliaryData[1]==108) then --l left turn in degree\n                    -- if key l pressed axis1 angle substract 5 degrees\n                     rotation1 = rotation1 - 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if l\n                if (auxiliaryData[1]==100) then --d suction pad down\n                    -- if key d pressed axis3 will down 0.01 m plus calibration\n                     distance3 = distance3 + 0.01 + calibration\n                     sim.setJointPosition(axis3, distance3)\n                end -- if d\n                if (auxiliaryData[1]==117) then --u suction pad up\n                    -- if key u pressed axis3 will up 0.01 m minus calibration\n                    -- 吸盤往下升 1 公分加上校正值\n                     distance3 = distance3 - 0.01 - calibration\n                     sim.setJointPosition(axis3, distance3)\n                end -- if u\n                if (auxiliaryData[1]==99) then --c coordinate of block\n                    blockPosition = sim.getObjectPosition(block, BaseFrame)\n                    sim.addStatusbarMessage("方塊目前座標為:"..table_to_string(blockPosition))\n                end --if c\n           end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n        end -- while\nend -- function\n\nfunction sysCall_init()\n    joint1=sim.getObjectHandle(\'joint1\')\n    joint2=sim.getObjectHandle(\'joint2\')\n    joint3=sim.getObjectHandle(\'joint3\')\n    jointz=sim.getObjectHandle(\'jointZ\')\n    sim.setJointTargetPosition(joint1,0)\n    sim.setJointTargetPosition(joint2,0)\n    sim.setJointTargetPosition(joint3,0)\n    sim.setJointTargetPosition(jointz,0)\n    deg1=0\n    deg2=0\n    deg3=0\nend\n\nfunction sysCall_actuation()\n    message,auxiliaryData=sim.getSimulatorMessage()\n    while message~=-1 do\n        if (message==sim.message_keypress) then\n            if (auxiliaryData[1]==2009) then\n            deg1=deg1+1\n            deg3=deg2-deg1\n            sim.setJointTargetPosition(joint1,deg1*math.pi/180)\n            end\n            if (auxiliaryData[1]==2010) then\n            deg1=deg1-1\n            deg3=deg2-deg1\n            sim.setJointTargetPosition(joint1,deg1*math.pi/180)\n            end\n            if (auxiliaryData[1]==2007) then\n            deg2=deg2+1\n            deg3=deg1-deg2\n            sim.setJointTargetPosition(joint2,deg2*math.pi/180)\n            end\n            if (auxiliaryData[1]==2008) then\n            deg2=deg2-1\n            deg3=deg1-deg2\n            sim.setJointTargetPosition(joint2,deg2*math.pi/180)\n            end\n            if (auxiliaryData[1]==115) then\n                sim.setJointTargetPosition(jointz,-0.018)\n                sim.setIntegerSignal("pad_switch",1)\n            end\n            if(auxiliaryData[1]==119) then\n                sim.setJointTargetPosition(jointz,0)\n            end\n            if(auxiliaryData[1]==32) then\n                sim.setIntegerSignal("pad_switch",0)\n            end\n            sim.setJointTargetPosition(joint3,deg3*math.pi/180)\n        end\n    message,auxiliaryData=sim.getSimulatorMessage()\n    end\nend\n\nfunction sysCall_init()\n    joint1=sim.getObjectHandle(\'joint1\')\n    joint2=sim.getObjectHandle(\'joint2\')    \n    joint3=sim.getObjectHandle(\'joint3\')\n    jointz=sim.getObjectHandle(\'jointZ\')\n    sim.setJointTargetPosition(joint1,0)\n    sim.setJointTargetPosition(joint2,0)\n    sim.setJointTargetPosition(joint3,0)\n    sim.setJointTargetPosition(jointz,0)\n    deg1=0\n    deg2=0\n    deg3=0\nend\n\nfunction sysCall_actuation()\n    message,auxiliaryData=sim.getSimulatorMessage()\n    while message~=-1 do\n        if (message==sim.message_keypress) then\n            if (auxiliaryData[1]==100) then\n            deg1=deg1+1\n            deg3=deg2-deg1\n            sim.setJointTargetPosition(joint1,deg1*math.pi/180)\n            end\n            if (auxiliaryData[1]==97) then\n            deg1=deg1-1\n            deg3=deg2-deg1\n            sim.setJointTargetPosition(joint1,deg1*math.pi/180)\n            end\n            if (auxiliaryData[1]==119) then\n            deg2=deg2+1\n            deg3=deg1-deg2\n            sim.setJointTargetPosition(joint2,deg2*math.pi/180)\n            end\n            if (auxiliaryData[1]==115) then\n            deg2=deg2-1\n            deg3=deg1-deg2\n            sim.setJointTargetPosition(joint2,deg2*math.pi/180)\n            end\n            if (auxiliaryData[1]==2008) then\n                sim.setJointTargetPosition(jointz,-0.018)\n                sim.setIntegerSignal("pad_switch",1)\n            end\n            if(auxiliaryData[1]==2007) then\n                sim.setJointTargetPosition(jointz,0)\n            end\n            if(auxiliaryData[1]==32) then\n                sim.setIntegerSignal("pad_switch",0)\n            end\n            sim.setJointTargetPosition(joint3,deg3*math.pi/180)\n        end\n    message,auxiliaryData=sim.getSimulatorMessage()\n    end\nend\n\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n\n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n\n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n\n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n\n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n    \n]]--\nend\nfunction sysCall_cleanup() \nend \n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\n\n\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n \n \n 影片翻譯： \n 法1：YouTube介面 設定>字幕>自動翻譯>中文(繁體) \n (翻譯較不精確) \n \n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'W16', 'text': 'Onshape零件 \n Onshape圖檔 \n 繪製圖檔過程: \n \n \n CoppeliaSim場景 \n W16_exam_雲端硬碟 \n 建立場景過程: \n \n \n suction pad 吸盤 \n 加入吸盤後，鍵盤控制作動: \n \n 參考鍵碼: \n \n keyboard.lua內容: \n function sysCall_init()\n    joint1=sim.getObjectHandle(\'joint1\')\n    joint2=sim.getObjectHandle(\'joint2\')    \n    joint3=sim.getObjectHandle(\'joint3\')\n    jointz=sim.getObjectHandle(\'jointZ\')\n    sim.setJointTargetPosition(joint1,0)\n    sim.setJointTargetPosition(joint2,0)\n    sim.setJointTargetPosition(joint3,0)\n    sim.setJointTargetPosition(jointz,0)\n    deg1=0\n    deg2=0\n    deg3=0\nend\n\nfunction sysCall_actuation()\n    message,auxiliaryData=sim.getSimulatorMessage()\n    while message~=-1 do\n        if (message==sim.message_keypress) then\n            if (auxiliaryData[1]==100) then\n            deg1=deg1+1\n            deg3=deg2-deg1\n            sim.setJointTargetPosition(joint1,deg1*math.pi/180)\n            end\n            if (auxiliaryData[1]==97) then\n            deg1=deg1-1\n            deg3=deg2-deg1\n            sim.setJointTargetPosition(joint1,deg1*math.pi/180)\n            end\n            if (auxiliaryData[1]==119) then\n            deg2=deg2+1\n            deg3=deg1-deg2\n            sim.setJointTargetPosition(joint2,deg2*math.pi/180)\n            end\n            if (auxiliaryData[1]==115) then\n            deg2=deg2-1\n            deg3=deg1-deg2\n            sim.setJointTargetPosition(joint2,deg2*math.pi/180)\n            end\n            if (auxiliaryData[1]==2008) then\n                sim.setJointTargetPosition(jointz,-0.018)\n                sim.setIntegerSignal("pad_switch",1)\n            end\n            if(auxiliaryData[1]==2007) then\n                sim.setJointTargetPosition(jointz,0)\n            end\n            if(auxiliaryData[1]==32) then\n                sim.setIntegerSignal("pad_switch",0)\n            end\n            sim.setJointTargetPosition(joint3,deg3*math.pi/180)\n        end\n    message,auxiliaryData=sim.getSimulatorMessage()\n    end\nend\n \n \n \n 逆向運動學函式 \n Lua作動: \n \n Lua control.lua內容: \n function moving(x,y)\n    a=0.467\n    b=0.401\n    c=math.pow(math.pow(x,2)+math.pow(y,2),0.5)\n    s=(a+b+c)*0.5\n    area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)\n    h=area/(2*c)\n    deg1_base=math.atan(x/y)\n    if x<0 and y<0 then\n        deg1_base=deg1_base+math.pi\n    end\n    deg1_tri=math.asin(h/a)\n    deg1=deg1_base+deg1_tri\n    deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)\n    deg3=deg2-deg1\n    print(deg3)\n    sim.setJointTargetPosition(joint1,deg1)\n    sim.setJointTargetPosition(joint2,-deg2)\n    sim.setJointTargetPosition(joint3,deg3)\n    \nend\n\nfunction pick_and_place(x,y)\n    sim.setIntegerSignal("pad_switch",0)\n    sim.wait(t)\n    moving(0,0.868)\n    sim.wait(t)\n    moving(x,y)\n    sim.wait(t)\n    sim.setIntegerSignal("pad_switch",1)\n    sim.setJointTargetPosition(jointz,-0.018)\n    sim.wait(t)\n    sim.setJointTargetPosition(jointz,0)\n    sim.wait(t)\nend\n\nfunction sysCall_threadmain()\n    t=5\n    joint1=sim.getObjectHandle(\'joint1\')\n    joint2=sim.getObjectHandle(\'joint2\')\n    jointz=sim.getObjectHandle(\'jointZ\')\n    joint3=sim.getObjectHandle(\'joint3\')\n    sim.setJointTargetPosition(joint1,0)\n    sim.setJointTargetPosition(joint2,0)\n    sim.setJointTargetPosition(joint3,0)\n    sim.setIntegerSignal("pad_switch",1)\n    sim.setJointTargetPosition(jointz,-0.018)\n    sim.wait(t)\n    sim.setJointTargetPosition(jointz,0)\n    sim.wait(t)\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostopre do\n        x=0.2\n        y=0.7\n        moving(x,y)\n        sim.wait(t)\n        pick_and_place(x,y)\n        x=-0.3\n        y=-0.55\n        moving(x,y)\n        sim.wait(t)\n        pick_and_place(x,y)\n    end\nend \n \n \n remote API \n remote API作動: \n \n Python remote API.py內容: \n import sim as vrep\nimport math\nimport random\nimport time\nimport math\n\ndef moving(x,y):\n    a=0.467\n    b=0.401\n    c=math.pow(math.pow(x,2)+math.pow(y,2),0.5)\n    s=(a+b+c)*0.5\n    area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)\n    h=area/(2*c)\n    deg1_base=math.atan(x/y)\n    if x<0 and y<0 :\n        deg1_base=deg1_base+math.pi\n    deg1_tri=math.asin(h/a)\n    deg1=deg1_base+deg1_tri\n    deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)\n    deg3=deg2-deg1\n    vrep.simxSetJointTargetPosition(clientID,joint01,deg1,opmode)\n    vrep.simxSetJointTargetPosition(clientID,joint02,(-deg2),opmode)\n    vrep.simxSetJointTargetPosition(clientID,joint03,deg3,opmode)\n\ndef pick_and_place(x,y):\n    vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)\n    time.sleep(tt)\n    moving(0,0.868)\n    time.sleep(tt)\n    moving(x,y)\n    time.sleep(tt)\n    vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)\n    vrep.simxSetJointTargetPosition(clientID,jointz,-0.018,opmode)\n    time.sleep(tt)\n    vrep.simxSetJointTargetPosition(clientID,jointz,0,opmode)\n    time.sleep(tt)\n\n\n\nprint (\'Start\')\n \nvrep.simxFinish(-1)\n \nclientID = vrep.simxStart(\'172.20.10.4\', 19997, True, True, 5000, 5)\n  \nif clientID != -1:\n    print (\'Connected to remote API server\')\n      \n    res = vrep.simxAddStatusbarMessage(\n        clientID, "40823224",\n        vrep.simx_opmode_oneshot)\n    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):\n        print("Could not add a message to the status bar.")\n  \n     \n    opmode = vrep.simx_opmode_oneshot_wait\n    STREAMING = vrep.simx_opmode_streaming\n  \n     \n    vrep.simxStartSimulation(clientID, opmode)\n    ret,joint01=vrep.simxGetObjectHandle(clientID,"joint1",opmode)\n    ret,joint02=vrep.simxGetObjectHandle(clientID,"joint2",opmode)\n    ret,joint03=vrep.simxGetObjectHandle(clientID,"joint3",opmode)\n    ret,jointz=vrep.simxGetObjectHandle(clientID,"jointZ",opmode)\n    tt=1.5\n \n\n    while True :\n        vrep.simxSetJointTargetPosition(clientID,joint01,0,opmode)\n        vrep.simxSetJointTargetPosition(clientID,joint02,0,opmode)\n        vrep.simxSetJointTargetPosition(clientID,joint03,0,opmode)\n        vrep.simxSetJointTargetPosition(clientID,jointz,-0.018,opmode)\n        vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)\n        time.sleep(tt)\n        vrep.simxSetJointTargetPosition(clientID,jointz,0,opmode)\n        time.sleep(tt)\n        while True:\n            x=0.2\n            y=0.7\n            moving(x,y)\n            time.sleep(tt)\n            pick_and_place(x,y)\n            x=-0.3\n            y=-0.55\n            moving(x,y)\n            time.sleep(tt)\n            pick_and_place(x,y)\n \n', 'tags': '', 'url': 'W16.html'}, {'title': 'Onshape零件', 'text': 'Onshape圖檔 \n 繪製圖檔過程: \n', 'tags': '', 'url': 'Onshape零件.html'}, {'title': 'CoppeliaSim場景', 'text': 'W16_exam_雲端硬碟 \n 建立場景過程: \n', 'tags': '', 'url': 'CoppeliaSim場景.html'}, {'title': 'suction pad 吸盤', 'text': '加入吸盤後，鍵盤控制作動: \n \n 參考鍵碼: \n \n keyboard.lua內容: \n function sysCall_init()\n    joint1=sim.getObjectHandle(\'joint1\')\n    joint2=sim.getObjectHandle(\'joint2\')    \n    joint3=sim.getObjectHandle(\'joint3\')\n    jointz=sim.getObjectHandle(\'jointZ\')\n    sim.setJointTargetPosition(joint1,0)\n    sim.setJointTargetPosition(joint2,0)\n    sim.setJointTargetPosition(joint3,0)\n    sim.setJointTargetPosition(jointz,0)\n    deg1=0\n    deg2=0\n    deg3=0\nend\n\nfunction sysCall_actuation()\n    message,auxiliaryData=sim.getSimulatorMessage()\n    while message~=-1 do\n        if (message==sim.message_keypress) then\n            if (auxiliaryData[1]==100) then\n            deg1=deg1+1\n            deg3=deg2-deg1\n            sim.setJointTargetPosition(joint1,deg1*math.pi/180)\n            end\n            if (auxiliaryData[1]==97) then\n            deg1=deg1-1\n            deg3=deg2-deg1\n            sim.setJointTargetPosition(joint1,deg1*math.pi/180)\n            end\n            if (auxiliaryData[1]==119) then\n            deg2=deg2+1\n            deg3=deg1-deg2\n            sim.setJointTargetPosition(joint2,deg2*math.pi/180)\n            end\n            if (auxiliaryData[1]==115) then\n            deg2=deg2-1\n            deg3=deg1-deg2\n            sim.setJointTargetPosition(joint2,deg2*math.pi/180)\n            end\n            if (auxiliaryData[1]==2008) then\n                sim.setJointTargetPosition(jointz,-0.018)\n                sim.setIntegerSignal("pad_switch",1)\n            end\n            if(auxiliaryData[1]==2007) then\n                sim.setJointTargetPosition(jointz,0)\n            end\n            if(auxiliaryData[1]==32) then\n                sim.setIntegerSignal("pad_switch",0)\n            end\n            sim.setJointTargetPosition(joint3,deg3*math.pi/180)\n        end\n    message,auxiliaryData=sim.getSimulatorMessage()\n    end\nend\n \n', 'tags': '', 'url': 'suction pad 吸盤.html'}, {'title': '逆向運動學函式', 'text': 'Lua作動: \n \n Lua control.lua內容: \n function moving(x,y)\n    a=0.467\n    b=0.401\n    c=math.pow(math.pow(x,2)+math.pow(y,2),0.5)\n    s=(a+b+c)*0.5\n    area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)\n    h=area/(2*c)\n    deg1_base=math.atan(x/y)\n    if x<0 and y<0 then\n        deg1_base=deg1_base+math.pi\n    end\n    deg1_tri=math.asin(h/a)\n    deg1=deg1_base+deg1_tri\n    deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)\n    deg3=deg2-deg1\n    print(deg3)\n    sim.setJointTargetPosition(joint1,deg1)\n    sim.setJointTargetPosition(joint2,-deg2)\n    sim.setJointTargetPosition(joint3,deg3)\n    \nend\n\nfunction pick_and_place(x,y)\n    sim.setIntegerSignal("pad_switch",0)\n    sim.wait(t)\n    moving(0,0.868)\n    sim.wait(t)\n    moving(x,y)\n    sim.wait(t)\n    sim.setIntegerSignal("pad_switch",1)\n    sim.setJointTargetPosition(jointz,-0.018)\n    sim.wait(t)\n    sim.setJointTargetPosition(jointz,0)\n    sim.wait(t)\nend\n\nfunction sysCall_threadmain()\n    t=5\n    joint1=sim.getObjectHandle(\'joint1\')\n    joint2=sim.getObjectHandle(\'joint2\')\n    jointz=sim.getObjectHandle(\'jointZ\')\n    joint3=sim.getObjectHandle(\'joint3\')\n    sim.setJointTargetPosition(joint1,0)\n    sim.setJointTargetPosition(joint2,0)\n    sim.setJointTargetPosition(joint3,0)\n    sim.setIntegerSignal("pad_switch",1)\n    sim.setJointTargetPosition(jointz,-0.018)\n    sim.wait(t)\n    sim.setJointTargetPosition(jointz,0)\n    sim.wait(t)\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostopre do\n        x=0.2\n        y=0.7\n        moving(x,y)\n        sim.wait(t)\n        pick_and_place(x,y)\n        x=-0.3\n        y=-0.55\n        moving(x,y)\n        sim.wait(t)\n        pick_and_place(x,y)\n    end\nend \n', 'tags': '', 'url': '逆向運動學函式.html'}, {'title': 'remote API', 'text': 'remote API作動: \n \n Python remote API.py內容: \n import sim as vrep\nimport math\nimport random\nimport time\nimport math\n\ndef moving(x,y):\n    a=0.467\n    b=0.401\n    c=math.pow(math.pow(x,2)+math.pow(y,2),0.5)\n    s=(a+b+c)*0.5\n    area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)\n    h=area/(2*c)\n    deg1_base=math.atan(x/y)\n    if x<0 and y<0 :\n        deg1_base=deg1_base+math.pi\n    deg1_tri=math.asin(h/a)\n    deg1=deg1_base+deg1_tri\n    deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)\n    deg3=deg2-deg1\n    vrep.simxSetJointTargetPosition(clientID,joint01,deg1,opmode)\n    vrep.simxSetJointTargetPosition(clientID,joint02,(-deg2),opmode)\n    vrep.simxSetJointTargetPosition(clientID,joint03,deg3,opmode)\n\ndef pick_and_place(x,y):\n    vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)\n    time.sleep(tt)\n    moving(0,0.868)\n    time.sleep(tt)\n    moving(x,y)\n    time.sleep(tt)\n    vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)\n    vrep.simxSetJointTargetPosition(clientID,jointz,-0.018,opmode)\n    time.sleep(tt)\n    vrep.simxSetJointTargetPosition(clientID,jointz,0,opmode)\n    time.sleep(tt)\n\n\n\nprint (\'Start\')\n \nvrep.simxFinish(-1)\n \nclientID = vrep.simxStart(\'172.20.10.4\', 19997, True, True, 5000, 5)\n  \nif clientID != -1:\n    print (\'Connected to remote API server\')\n      \n    res = vrep.simxAddStatusbarMessage(\n        clientID, "40823224",\n        vrep.simx_opmode_oneshot)\n    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):\n        print("Could not add a message to the status bar.")\n  \n     \n    opmode = vrep.simx_opmode_oneshot_wait\n    STREAMING = vrep.simx_opmode_streaming\n  \n     \n    vrep.simxStartSimulation(clientID, opmode)\n    ret,joint01=vrep.simxGetObjectHandle(clientID,"joint1",opmode)\n    ret,joint02=vrep.simxGetObjectHandle(clientID,"joint2",opmode)\n    ret,joint03=vrep.simxGetObjectHandle(clientID,"joint3",opmode)\n    ret,jointz=vrep.simxGetObjectHandle(clientID,"jointZ",opmode)\n    tt=1.5\n \n\n    while True :\n        vrep.simxSetJointTargetPosition(clientID,joint01,0,opmode)\n        vrep.simxSetJointTargetPosition(clientID,joint02,0,opmode)\n        vrep.simxSetJointTargetPosition(clientID,joint03,0,opmode)\n        vrep.simxSetJointTargetPosition(clientID,jointz,-0.018,opmode)\n        vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)\n        time.sleep(tt)\n        vrep.simxSetJointTargetPosition(clientID,jointz,0,opmode)\n        time.sleep(tt)\n        while True:\n            x=0.2\n            y=0.7\n            moving(x,y)\n            time.sleep(tt)\n            pick_and_place(x,y)\n            x=-0.3\n            y=-0.55\n            moving(x,y)\n            time.sleep(tt)\n            pick_and_place(x,y)\n \n', 'tags': '', 'url': 'remote API.html'}, {'title': 'W17', 'text': '評分模擬影片 \n', 'tags': '', 'url': 'W17.html'}, {'title': '筆記', 'text': '', 'tags': '', 'url': '筆記.html'}, {'title': 'leo編輯', 'text': '若要新增節點：ctrl+I \n 變更為子節點：ctrl+R \n 上下左右移動： \n 右： ctrl+R、左：ctrl+L、上：ctrl+U、下：ctrl+D \n', 'tags': '', 'url': 'leo編輯.html'}, {'title': '使用cms批次檔', 'text': '使用 cms.bat 成功開啟9443 \n \n \n \n', 'tags': '', 'url': '使用cms批次檔.html'}, {'title': 'CoppeliaSim操作筆記', 'text': '\n', 'tags': '', 'url': 'CoppeliaSim操作筆記.html'}, {'title': 'Gitlab', 'text': 'Gitlab 倉儲頁面 \n \n 確認網頁OK \n \n \n \n', 'tags': '', 'url': 'Gitlab.html'}, {'title': 'Fossil', 'text': '建立 Gogs \n \n Gogs 頁面 \n \n 輸入  https://fossil.kmol.info:9443/ \xa0建立 fossil \n \n 登入 \n \n Setup> Users  確認使用者 \n \n 下載 fossil scm 放在 Y槽 \n \n 更改名稱 \n \n 輸入cd2021 \n \n 點選Wiki \n \n 創建html \n 3443 可開啟 gogs \n 9443 可開啟 fossil \n \n 可預覽，預覽無問題後儲存並關閉 \n \n 進入已自行創好的資料夾(fossil) \n \n clone \n \n 將cd2021倉儲資料貼上至名為學號的資料夾內(fossil>wd>學號) \n *wd為working directory，為了不要使其無限迴圈 \n *_FOSSIL_ 類似.git資料夾，儲存了版本的資料 \n \n 開啟fossil \n \n fossil 只要 commit 就好 \n \n 成功上傳 \n \n 輸入\xa0 https://fossil.kmol.info/u/40823224/doc/trunk/content/index.html  即跟 github page 相同 \n \n', 'tags': '', 'url': 'Fossil.html'}]};